// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/user.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	models "gitlab.ozon.dev/mr.eskov1/telegram-bot/internal/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ChangeUserCurrency mocks base method.
func (m *MockRepository) ChangeUserCurrency(ctx context.Context, id models.UserID, currency models.CurrencyCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserCurrency", ctx, id, currency)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserCurrency indicates an expected call of ChangeUserCurrency.
func (mr *MockRepositoryMockRecorder) ChangeUserCurrency(ctx, id, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserCurrency", reflect.TypeOf((*MockRepository)(nil).ChangeUserCurrency), ctx, id, currency)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, u models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, u)
}

// GetUserCurrency mocks base method.
func (m *MockRepository) GetUserCurrency(ctx context.Context, id models.UserID) (models.CurrencyCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCurrency", ctx, id)
	ret0, _ := ret[0].(models.CurrencyCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCurrency indicates an expected call of GetUserCurrency.
func (mr *MockRepositoryMockRecorder) GetUserCurrency(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCurrency", reflect.TypeOf((*MockRepository)(nil).GetUserCurrency), ctx, id)
}

// GetUserMonthlyLimit mocks base method.
func (m *MockRepository) GetUserMonthlyLimit(ctx context.Context, id models.UserID) (*decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMonthlyLimit", ctx, id)
	ret0, _ := ret[0].(*decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMonthlyLimit indicates an expected call of GetUserMonthlyLimit.
func (mr *MockRepositoryMockRecorder) GetUserMonthlyLimit(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMonthlyLimit", reflect.TypeOf((*MockRepository)(nil).GetUserMonthlyLimit), ctx, id)
}

// IsUserExists mocks base method.
func (m *MockRepository) IsUserExists(ctx context.Context, id models.UserID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExists indicates an expected call of IsUserExists.
func (mr *MockRepositoryMockRecorder) IsUserExists(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExists", reflect.TypeOf((*MockRepository)(nil).IsUserExists), ctx, id)
}

// SetUserMonthlyLimit mocks base method.
func (m *MockRepository) SetUserMonthlyLimit(ctx context.Context, id models.UserID, limit *decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserMonthlyLimit", ctx, id, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserMonthlyLimit indicates an expected call of SetUserMonthlyLimit.
func (mr *MockRepositoryMockRecorder) SetUserMonthlyLimit(ctx, id, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserMonthlyLimit", reflect.TypeOf((*MockRepository)(nil).SetUserMonthlyLimit), ctx, id, limit)
}

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// ChangeUserCurrency mocks base method.
func (m *MockUseCase) ChangeUserCurrency(ctx context.Context, id models.UserID, currency models.CurrencyCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserCurrency", ctx, id, currency)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserCurrency indicates an expected call of ChangeUserCurrency.
func (mr *MockUseCaseMockRecorder) ChangeUserCurrency(ctx, id, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserCurrency", reflect.TypeOf((*MockUseCase)(nil).ChangeUserCurrency), ctx, id, currency)
}

// CreateUser mocks base method.
func (m *MockUseCase) CreateUser(ctx context.Context, u models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUseCaseMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUseCase)(nil).CreateUser), ctx, u)
}

// GetUserCurrency mocks base method.
func (m *MockUseCase) GetUserCurrency(ctx context.Context, id models.UserID) (models.CurrencyCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCurrency", ctx, id)
	ret0, _ := ret[0].(models.CurrencyCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCurrency indicates an expected call of GetUserCurrency.
func (mr *MockUseCaseMockRecorder) GetUserCurrency(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCurrency", reflect.TypeOf((*MockUseCase)(nil).GetUserCurrency), ctx, id)
}

// GetUserMonthlyLimit mocks base method.
func (m *MockUseCase) GetUserMonthlyLimit(ctx context.Context, id models.UserID) (*decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMonthlyLimit", ctx, id)
	ret0, _ := ret[0].(*decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMonthlyLimit indicates an expected call of GetUserMonthlyLimit.
func (mr *MockUseCaseMockRecorder) GetUserMonthlyLimit(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMonthlyLimit", reflect.TypeOf((*MockUseCase)(nil).GetUserMonthlyLimit), ctx, id)
}

// IsUserExists mocks base method.
func (m *MockUseCase) IsUserExists(ctx context.Context, id models.UserID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExists indicates an expected call of IsUserExists.
func (mr *MockUseCaseMockRecorder) IsUserExists(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExists", reflect.TypeOf((*MockUseCase)(nil).IsUserExists), ctx, id)
}

// SetUserMonthlyLimit mocks base method.
func (m *MockUseCase) SetUserMonthlyLimit(ctx context.Context, id models.UserID, limit *decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserMonthlyLimit", ctx, id, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserMonthlyLimit indicates an expected call of SetUserMonthlyLimit.
func (mr *MockUseCaseMockRecorder) SetUserMonthlyLimit(ctx, id, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserMonthlyLimit", reflect.TypeOf((*MockUseCase)(nil).SetUserMonthlyLimit), ctx, id, limit)
}
