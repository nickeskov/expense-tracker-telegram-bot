// Code generated by MockGen. DO NOT EDIT.
// Source: internal/expense/usecase.go

// Package mock_expense is a generated GoMock package.
package mock_expense

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	expense "gitlab.ozon.dev/mr.eskov1/telegram-bot/internal/expense"
	models "gitlab.ozon.dev/mr.eskov1/telegram-bot/internal/models"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddExpense mocks base method.
func (m *MockUseCase) AddExpense(ctx context.Context, userID models.UserID, expense models.Expense) (models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExpense", ctx, userID, expense)
	ret0, _ := ret[0].(models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddExpense indicates an expected call of AddExpense.
func (mr *MockUseCaseMockRecorder) AddExpense(ctx, userID, expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpense", reflect.TypeOf((*MockUseCase)(nil).AddExpense), ctx, userID, expense)
}

// GetExpensesAscendSinceTill mocks base method.
func (m *MockUseCase) GetExpensesAscendSinceTill(ctx context.Context, userID models.UserID, since, till time.Time, max int) ([]models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpensesAscendSinceTill", ctx, userID, since, till, max)
	ret0, _ := ret[0].([]models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpensesAscendSinceTill indicates an expected call of GetExpensesAscendSinceTill.
func (mr *MockUseCaseMockRecorder) GetExpensesAscendSinceTill(ctx, userID, since, till, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpensesAscendSinceTill", reflect.TypeOf((*MockUseCase)(nil).GetExpensesAscendSinceTill), ctx, userID, since, till, max)
}

// GetExpensesSummaryByCategorySince mocks base method.
func (m *MockUseCase) GetExpensesSummaryByCategorySince(ctx context.Context, userID models.UserID, since, till time.Time) (expense.SummaryReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpensesSummaryByCategorySince", ctx, userID, since, till)
	ret0, _ := ret[0].(expense.SummaryReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpensesSummaryByCategorySince indicates an expected call of GetExpensesSummaryByCategorySince.
func (mr *MockUseCaseMockRecorder) GetExpensesSummaryByCategorySince(ctx, userID, since, till interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpensesSummaryByCategorySince", reflect.TypeOf((*MockUseCase)(nil).GetExpensesSummaryByCategorySince), ctx, userID, since, till)
}
